/* Resource1_ContinuousSendingData.dn
 *
 * This code just does the registry on the Emergent InterSCity Platform
 * and sends data to be stored on this Platform continuously.
 *
 * Some codes are copied from Roberto Rodrigues
 *
 * Author: Marcio Pereira de SÃ¡ - March @ 2019
 */

uses data.String

const char debugMSG[] = "[@Resource1_ContinuousSendingData]"

// tunning constants
const int NUM_OF_SEQUENCIAL_QUERY_REQUESTS = 10
const int SLEEP_INTERVAL = 100
const char SERVER_ADDRESS[] = "localhost"//"scc-mc1.lancs.ac.uk"

data InterscityMsg {
	char response[]
	char uuid[]
	char device[]
	char description[]
	String capabilities[]
	char status[]
	dec lat
	dec lon
	char country[]
	char state[]
	char city[]
	char neighborhood[]
	char postal_code[]
	char created_at[]
	char updated_at[]
	int id
}

component provides App requires io.Output out, data.IntUtil iu, time.Timer timer, net.http.HTTPRequest request,
	time.Calendar ic, time.DateUtil dateUtil, io.TextFile, io.Input in, data.json.JSONEncoder encoder {

	bool flag = true

	char[] formatTimeStamp(DateTime dt) {
		return new char[]("[", iu.intToString(dt.hour), ":",
			iu.intToString(dt.minute), ":", iu.intToString(dt.second), ":", iu.intToString(dt.millisecond), "]")
	}

	void triggerRequests(TextFile file, char url[]) {
		DateTime dt1 = null
		DateTime dt2 = null
		int result = 0
		dt1 = ic.getTime()
		HTTPResponse response = request.get(url, null)
		dt2 = ic.getTime()
		if ((dt1 != null) && (dt2 != null)) {
			result = dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
		}
		//file.writeLine(new char[](formatTimeStamp(dt2), " ", iu.intToString(result)))
	}

	void start(char payload1[], char payload2[], char uuid1[], char uuid2[], char capability_value[]) {
		TextFile file[] = new TextFile[1]
		char data_collector_requestURL[] = new char[]("http://", SERVER_ADDRESS, ":2020//collector/datafromresource/", uuid1)
		char resource_catalog_requestURL[] = new char[]("http://", SERVER_ADDRESS, ":2019//catalog/capabilities/)", capability_value)
		//char resource_adaptor_requestURL[] = new char[]("http://", SERVER_ADDRESS, ":2018//adaptor/resources/",uuid,"data", )
		char updateURL[] = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources/", uuid1, "/data")
		char updateURL2[] = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources/", uuid2, "/data")

		/* for (int i = 0; i < 1; i++) {
			//file[i] = new TextFile(new char[]("HFU_LV_DC_LFU_LV_RC_RESULTS/request-file-burst-", iu.intToString(i+1), ".data"),
			file[i] = new TextFile(new char[]("HFU_LV_RESULTS/request-file-burst-", iu.intToString(i+1), ".data"),
			File.FILE_ACCESS_WRITE)
		} */
		while (flag) {
			for (int i = 0; i < NUM_OF_SEQUENCIAL_QUERY_REQUESTS; i++) {
				triggerRequests(file[0], data_collector_requestURL)
				HTTPResponse response = request.get(resource_catalog_requestURL, null)
				request.post(updateURL, null, payload2)
			}

			request.post(updateURL, null, payload1)
			timer.sleep(SLEEP_INTERVAL)
		}
		/* for (int i = 0; i < 1; i++) {
			file[i].close()
		} */
	}





/* ================================================================================================= */
	int App:main(AppParam params[]) {
		/* --------------REGISTERING RESOURCE 1-------------- */
		out.println("$(debugMSG) Client started...")
		out.println("$(debugMSG) Registering resource 1...")
		// registering resource: bus ...
		char jsonBus[] = new char[]("{",
			"\"data\": {",
				"\"description\": \"public_bus\",",
				"\"capabilities\": [\"buslocation\", \"number_of_people\", \"noise_level\"],",
				"\"status\": \"active\",",
				"\"lat\": -23.559615,",
				"\"lon\": -46.731385",
			"}",
		"}")
		char url[] = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources")
		HTTPResponse response = request.post(url, null, jsonBus)
		InterscityMsg formatedResponse_resource1 = encoder.jsonToData(response.content, typeof(InterscityMsg), null)
		out.println("formatedResponse.uuid: $(formatedResponse_resource1.uuid)")

		/* -------------- REGISTERING RESOURCE 2 -------------- */
		out.println("$(debugMSG) Client started...")
		out.println("$(debugMSG) Registering resource 2...")
		// registering resource: bus ...
		char jsonTrafficLightControl[] = new char[]("{",
			"\"data\": {",
				"\"description\": \"traffic light control\",",
				"\"capabilities\": [\"number_of_vehicles\", \"number_of_people\", \"speed_detection\"],",
				"\"status\": \"active\",",
				"\"lat\": -23.5584615,",
				"\"lon\": -46.6543521",
			"}",
		"}")
		char url2[] = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources")
		HTTPResponse response2 = request.post(url2, null, jsonTrafficLightControl)
		InterscityMsg formatedResponse_resource2 = encoder.jsonToData(response2.content, typeof(InterscityMsg), null)
		out.println("formatedResponse.uuid: $(formatedResponse_resource2.uuid)")

		/* --------------ADDING DATA--------------*/
		out.println("$(debugMSG)  Adding data to the database (resource 1)...")
		// adding one location to the database...
		char jsonTrafficLightControl_DataToBeSent[] = new char[]("{",
		"\"data\": {",
				"\"public_bus\": [",
					"{",
						"\"location\": {",
							"\"lat\": -10.00032,",
							"\"lon\": -23.559615",
							"},",
						"\"speed\": 54,",
						"\"uuid\": 1,",//$(formatedResponse.uuid),",
						"\"bus_line\": \"875c-10-1\",",
						"\"timestamp\": \"2017-06-14T17:52:25.428Z\"",
					"}",
				"]",
			"}",
		"}")
		//url = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources/$(formatedResponse.uuid)/data")

		out.println("$(debugMSG)  Adding data to the database (resource 2)...")
		// adding one location to the database...
		char jsonBus_DataToBeSent[] = new char[]("{",
		"\"data\": {",
				"\"public_bus\": [",
					"{",
						"\"location\": {",
							"\"lat\": -10.00032,",
							"\"lon\": -23.559615",
							"},",
						"\"speed\": 54,",
						"\"uuid\": 1,",//$(formatedResponse.uuid),",
						"\"bus_line\": \"875c-10-1\",",
						"\"timestamp\": \"2017-06-14T17:52:25.428Z\"",
					"}",
				"]",
			"}",
		"}")


		char id[] = "1"
		//url = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources/$(id)/data")
	  url = new char[]("http://", SERVER_ADDRESS, ":2018/adaptor/resources/", id, "/data")

		//for (int i = 0; i < 10; i++) {
			response = request.post(url, null, jsonBus_DataToBeSent)
		//}

		if((response.headers[0].value) == "HTTP/1.1 200 OK") { out.println("$(debugMSG) Data sent successfully!") }

		out.println("Press enter to start triggering requests...")
		in.readln()



		/* --------------TRIGGERING REQUESTS-------------- */
	  out.println(new char[]("$(debugMSG) Starting requests... "))
		Thread startThread = asynch::start(jsonBus_DataToBeSent, jsonTrafficLightControl_DataToBeSent,
			formatedResponse_resource1.uuid, formatedResponse_resource2.uuid, "buslocation")
		//Thread startThread = asynch::start(jsonBus_DataToBeSent, "1", "buslocation")
		out.println("Press enter to finish...")
		in.readln()
		flag = false
		startThread.join()
		out.println("$(debugMSG) Client terminated successfully.")
		/* return 0 */








		/* -------------- GETTING RESOURCE'S META-DATA -------------- */
		/* out.println("Accessing the Resource Discovery...")
		out.println("Searching for resources which have the ability to monitor public bus in the city...")

		char url[] = "http://localhost:2021/discovery/resources?capability=public_bus"
		//char url[] = "http://localhost:2021/discovery/resources?capability=collected_garbage_monitoring"

		HTTPResponse response = request.get(url, null) */

		// ------ Accessing Resource Catalog directly ----------------------
		/* char capability_value[] = "public_bus"
		char url2[] = "http://localhost:2019/catalog/capabilities/$(capability_value)"
		Header headers[] = null
		for (int i = 0; i < NUM_SQ_REQUEST; i++) {
			HTTPResponse response2 = request.get(url2, null)//request.post(url, null, content)
			//out.println("response000111: $(response.content)")
		} */












		return 0
	}
}
