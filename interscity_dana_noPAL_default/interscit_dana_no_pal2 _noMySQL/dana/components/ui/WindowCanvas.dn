data WindowEventData {
	int button_id
	int x
	int y
}

interface UIPlaneLib{
	
	const int EVENT_MOUSE_UP = 1
	const int EVENT_MOUSE_DOWN = 2
	const int EVENT_MOUSE_MOVE = 3
	const int EVENT_RESIZE = 4
	const int EVENT_MOVE = 5
	const int EVENT_CLOSE = 6
	
	const int EVENT_KEY_DOWN = 7
	const int EVENT_KEY_UP = 8
	
	int makeWindow()
	
	void startPoly()
	void addPolyPoint(int x, int y, byte r, byte g, byte b, byte a)
	void endPoly()
	
	void addRect(int phandle, int x, int y, int w, int h, byte r, byte g, byte b, byte a)
	
	void addLine(int phandle, int sx, int sy, int ex, int ey, byte r, byte g, byte b, byte a)
	
	void addPoint(int phandle, int x, int y, byte r, byte g, byte b, byte a)
	void addBitmap(int phandle, PixelMap pixels, Rect subRect, int x, int y, int scaledWidth, int scaledHeight, int rotation)
	
	void addText(int phandle, int x, int y, char text[], byte r, byte g, byte b, byte a)
	void addTextWith(int phandle, int fontHandle, int x, int y, char text[], byte r, byte g, byte b, byte a)
	
	void pushSurface(int phandle, int x, int y, int w, int h, int sx, int sy, byte a)
	void popSurface(int phandle)
	
	void setSize(int phandle, int x, int y)

	void setPosition(int phandle, int x, int y)
	
	void setVisible(int phandle, bool b)
	
	void setResizable(int phandle, bool b)
	
	void setFullScreen(int phandle, bool b)
	
	void setTitle(int phandle, char t[])
	
	void setIcon(int phandle, PixelMap p)
	
	void commitBuffer(int phandle)
	
	void getResolution(int phandle, WH wh)
	
	void setBackgroundColor(int phandle, byte r, byte g, byte b, byte a)
	
	void maximiseWindow(int phandle)
	void minimiseWindow(int phandle)
	
	void getMaximisedScreenRect(int phandle, Rect r)
	
	void closeWindow(int phandle)
	
	// -- fonts --
	int loadFont(char path[], int size)
	int getTextWidth(int phandle, char text[])
	void getFontMetrics(int phandle, FontMetrics metrics)
	char[] getFontName(int phandle)
	bool isFontFixedWidth(int phandle)
	void getTextBitmapWith(int phandle, char text[], PixelMap pixels, byte r, byte g, byte b, byte a)
	void unloadFont(int fd)
	}

uses events.EventData

component provides WindowCanvas(Destructor), Font(Destructor) requires native UIPlaneLib lib, io.Output out, data.IntUtil iu
	{
	implementation WindowCanvas {
		int platformHandle
		Mutex windowStateLock = new Mutex()
		
		eventsink LibEvents(EventData ed)
			{
			if (ed.type == UIPlaneLib.EVENT_MOUSE_UP)
				{
				WindowEventData wed = ed.details
				emitevent mouseUp(new MouseEvent(ed.type, wed.button_id, wed.x, wed.y))
				}
				else if (ed.type == UIPlaneLib.EVENT_MOUSE_DOWN)
				{
				WindowEventData wed = ed.details
				emitevent mouseDown(new MouseEvent(ed.type, wed.button_id, wed.x, wed.y))
				}
				else if (ed.type == UIPlaneLib.EVENT_MOUSE_MOVE)
				{
				WindowEventData wed = ed.details
				emitevent mouseMove(new MouseEvent(ed.type, wed.button_id, wed.x, wed.y))
				}
				else if (ed.type == UIPlaneLib.EVENT_KEY_DOWN)
				{
				WindowEventData wed = ed.details
				emitevent keyDown(new KeyEvent(wed.button_id))
				}
				else if (ed.type == UIPlaneLib.EVENT_KEY_UP)
				{
				WindowEventData wed = ed.details
				emitevent keyUp(new KeyEvent(wed.button_id))
				}
				else if (ed.type == UIPlaneLib.EVENT_RESIZE)
				{
				WindowEventData wed = ed.details
				emitevent resizeWindow(new WH(wed.x, wed.y))
				}
				else if (ed.type == UIPlaneLib.EVENT_CLOSE)
				{
				emitevent closeWindow()
				}
			}
		
		WindowCanvas:WindowCanvas()
			{
			platformHandle = lib.makeWindow()
			if (platformHandle == 0) throw new Exception("Platform window creation failed")
			}
		
		void WindowCanvas:setVisible(bool b)
			{
			mutex(windowStateLock)
				{
				lib.setVisible(platformHandle, b)
				}
			}
		
		void WindowCanvas:setResizable(bool v)
			{
			mutex(windowStateLock)
				{
				lib.setResizable(platformHandle, v)
				}
			}
		
		void WindowCanvas:setFullScreen(bool v)
			{
			mutex(windowStateLock)
				{
				lib.setFullScreen(platformHandle, v)
				}
			}
		
		WH WindowCanvas:getResolution()
			{
			mutex(windowStateLock)
				{
				WH wh = new WH()
				lib.getResolution(platformHandle, wh)
				
				return wh
				}
			}
		
		void WindowCanvas:setTitle(char title[])
			{
			mutex(windowStateLock)
				{
				lib.setTitle(platformHandle, title)
				}
			}
		
		void WindowCanvas:setIcon(PixelMap p)
			{
			mutex(windowStateLock)
				{
				lib.setIcon(platformHandle, p)
				}
			}
		
		void WindowCanvas:close()
			{
			mutex(windowStateLock)
				{
				if (platformHandle != 0)
					{
					lib.closeWindow(platformHandle)
					platformHandle = 0
					}
				}
			}
		
		void WindowCanvas:paint()
			{
			mutex(windowStateLock)
				{
				lib.commitBuffer(platformHandle)
				}
			}
		
		void WindowCanvas:drawRect(Rect2D r)
			{
			mutex(windowStateLock)
				{
				lib.addRect(platformHandle, r.x, r.y, r.width, r.height, r.color.r, r.color.g, r.color.b, r.color.a)
				}
			}
		
		void WindowCanvas:drawRectOutline(Rect2D r)
			{
			drawLine(new Line2D(r.x, r.y, (r.x + r.width) - 1, r.y, r.color))
			
			drawLine(new Line2D(r.x, r.y, r.x, (r.y + r.height) - 1, r.color))
			
			drawLine(new Line2D((r.x + r.width) - 1, r.y, (r.x + r.width) - 1, (r.y + r.height) - 1, r.color))
			
			drawLine(new Line2D(r.x, (r.y + r.height) - 1, (r.x + r.width) - 1, (r.y + r.height) - 1, r.color))
			}
		
		void WindowCanvas:drawLine(Line2D l)
			{
			mutex(windowStateLock)
				{
				lib.addLine(platformHandle, l.sx, l.sy, l.ex, l.ey, l.color.r, l.color.g, l.color.b, l.color.a)
				}
			}
		
		void WindowCanvas:drawPoint(Point2D p)
			{
			mutex(windowStateLock)
				{
				lib.addPoint(platformHandle, p.x, p.y, p.color.r, p.color.g, p.color.b, p.color.a)
				}
			}
		
		void WindowCanvas:drawPixels(PixelMap map, int x, int y, int rotation)
			{
			mutex(windowStateLock)
				{
				lib.addBitmap(platformHandle, map, null, x, y, map.size.width, map.size.height, rotation)
				}
			}
		
		void WindowCanvas:drawPixelsX(PixelMap map, Rect subRect, int x, int y, int scaledWidth, int scaledHeight, int rotation)
			{
			mutex(windowStateLock)
				{
				lib.addBitmap(platformHandle, map, subRect, x, y, scaledWidth, scaledHeight, rotation)
				}
			}
		
		void WindowCanvas:drawText(Point2D origin, Font f, char text[])
			{
			//check if f is implemented by this component and if so we use its internal font handle; otherwise we fall back on Font.getBitmap() (which is slow)
			mutex(windowStateLock)
				{
				if (implements f)
					{
					lib.addTextWith(platformHandle, f.platformHandle, origin.x, origin.y, text, origin.color.r, origin.color.g, origin.color.b, origin.color.a)
					}
					else
					{
					PixelMap px = f.getPixels(text, origin.color)
					lib.addBitmap(platformHandle, px, null, origin.x, origin.y, px.size.width, px.size.height, 0)
					}
				}
			}
		
		void WindowCanvas:pushSurface(Rect rect, int xscr, int yscr, byte alpha)
			{
			mutex(windowStateLock)
				{
				lib.pushSurface(platformHandle, rect.x, rect.y, rect.width, rect.height, xscr, yscr, alpha)
				}
			}
		
		void WindowCanvas:popSurface()
			{
			mutex(windowStateLock)
				{
				lib.popSurface(platformHandle)
				}
			}
		
		void WindowCanvas:setPosition(int x, int y)
			{
			mutex(windowStateLock)
				{
				lib.setPosition(platformHandle, x, y)
				}
			}
		
		void WindowCanvas:setSize(int x, int y)
			{
			mutex(windowStateLock)
				{
				lib.setSize(platformHandle, x, y)
				}
			}
		
		void WindowCanvas:setBackground(Color c)
			{
			mutex(windowStateLock)
				{
				lib.setBackgroundColor(platformHandle, c.r, c.g, c.b, c.a)
				}
			}
		
		void Destructor:destroy()
			{
			close()
			}
		}
	
	implementation Font{
		int platformHandle
		
		Font:Font(char path[], int size)
			{
			platformHandle = lib.loadFont(path, size)
			
			if (platformHandle == 0) throw new Exception("Failed to load font $path")
			}
		
		FontMetrics Font:getFontMetrics()
			{
			FontMetrics result = new FontMetrics()
			lib.getFontMetrics(platformHandle, result)
			return result
			}
		
		char[] Font:getFontName()
			{
			return lib.getFontName(platformHandle)
			}
		
		bool Font:isFixedCharacterWidth()
			{
			return lib.isFontFixedWidth(platformHandle)
			}
		
		int Font:getTextWidth(char text[])
			{
			return lib.getTextWidth(platformHandle, text)
			}
		
		PixelMap Font:getPixels(char string[], Color textColor)
			{
			PixelMap result = new PixelMap(new WH())
			lib.getTextBitmapWith(platformHandle, string, result, textColor.r, textColor.g, textColor.b, textColor.a)
			return result
			}
		
		void Destructor:destroy()
			{
			lib.unloadFont(platformHandle)
			}
		}
	}