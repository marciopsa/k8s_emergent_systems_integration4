/* NFRProxy.dn
 *
 * Author: Roberto Rodrigues Filho - Sept @ 2018
 */
component provides ws.Web requires io.Output out, ws.Web:nfrp web,
monitoring.ResponseTime responseTime, data.IntUtil iu, net.http.HTTPRequest request {

	HTTPResponse response
	char url[] = "http://35.232.187.28:8083/106"
	int request_counter = 0
	int average_response_time = 0
	int accumulated_response_time = 0
	int temp_response_time1 = 0
	int temp_response_time2 = 0


	void notify_stackdriver() {

		out.println("\nbefore request1111111")
		response = request.get(url, null)
		out.println("\nafter request1111111")
		temp_response_time1 = 0
		temp_response_time2 = 0
		accumulated_response_time = 0
		request_counter = 0
	}

	bool Web:get(char path[], DocStream stream, HashTable params) {


		responseTime.start()
		out.println("\nResponse Time3: ms")
		return web.get(path, stream, params)
		responseTime.finish()
		out.println("\nResponse Time2: $(iu.intToString(responseTime.result())) ms")



		if (request_counter > 49) {

			notify_stackdriver()
		} else {
			temp_response_time1 = responseTime.result()
			temp_response_time2 = accumulated_response_time
			accumulated_response_time = (temp_response_time1 + temp_response_time2)/request_counter

			request_counter++
		}



	}


	bool Web:post(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
		return web.post(path, contentType, content, stream, params)
	}

	String[] Web:urls() {
		return web.urls()
	}
}
