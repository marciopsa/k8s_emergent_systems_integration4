component provides App requires io.Output out, net.http.HTTPRequest http, data.IntUtil iu,
	time.Calendar calendar, time.DateUtil dateUtil, time.Timer timer {

	char server[] = "35.239.83.45"
	//char server[] = "localhost"
	int NUM_THREADS = 10
	int NUM_THREADS_ARRAY[] = new int[](10, 20, 30, 40, 50, 100, 150, 200, 250, 300)
	char url[]
	HTTPResponse response


	int average_response_time = 0
	int accumulated_response_time = 0
	int total_response_time = 0
	int total_requests = 0
	int temp_response_time1 = 0
	int request_counter = 0
	//int temp_response_time2 = 0


	void notify_stackdriver() {
		average_response_time = accumulated_response_time/request_counter
		char average_response_time_str[] = iu.intToString(average_response_time)
		total_response_time = accumulated_response_time

		//char response_time_str[] = iu.intToString(response_time)

		//url = "http://35.223.150.4:8081/$(average_response_time_str)"
		char url1[] = "http://35.223.19.202:8081/$(average_response_time_str)"
		out.println("\nbefore request1111111: $(url1)")
		out.println("request_counter..: $(iu.intToString(request_counter))")
		out.println("average_response_time_str..: $(average_response_time_str)")
		response = http.get(url1, null)
		out.println("\nafter request22222")
		//temp_response_time1 = 0
		
		accumulated_response_time = 0
		average_response_time = 0
		request_counter = 0
	}	

		
	int App:main(AppParam params[]) {
		
		//================================================================================
 	 	// ---------- Getting data from Data Collector directly ----------------

		//url = "http://35.239.83.45:2020//collector/datafromresource/1"
		url = "http://34.68.79.114:2020//collector/datafromresource/1"
		
		//for(int i = 0; i < 10000; i++) {

		while(true) {
 			
			//timer.sleep(1000) 
			DateTime start = calendar.getTime()
 			response = http.get(url, null)
			DateTime end = calendar.getTime()
			DateTime diff = dateUtil.diff(start, end)
 			
 			//char resp[] = iu.intToString(response.content)
			if (response == null) {
 				out.println("NULL ============================= NULL")
			} else {
				out.println("response.content 12345..: $(response.content)")

				//out.println("iteration..: $(iu.intToString(i))")

				int response_time = dateUtil.toMilliseconds(diff)
				accumulated_response_time = accumulated_response_time + response_time
				request_counter++
				total_requests++
				if (request_counter == 30) {
					notify_stackdriver()
				} 
		

				out.println("resp.content..: $(response.content)")
				out.println("response_time..: $(iu.intToString(response_time))")
				out.println("accumulated_response_time..: $(iu.intToString(accumulated_response_time))")
				out.println("request_counter..: $(iu.intToString(request_counter))")
				out.println("============= total_requests..: $(iu.intToString(total_requests))")
				out.println("============= total_response_time..: $(iu.intToString(total_response_time))")
			}	
			
 		}
	 	return 0
  	}
}
