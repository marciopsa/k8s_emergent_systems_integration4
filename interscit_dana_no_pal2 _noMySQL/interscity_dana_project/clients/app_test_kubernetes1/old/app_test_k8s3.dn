component provides App requires io.Output out, net.http.HTTPRequest http, data.IntUtil iu,
	time.Calendar calendar, time.DateUtil dateUtil {

	char server[] = "35.239.83.45"
	//char server[] = "localhost"
	int NUM_THREADS = 10

	void makeRequest(char resource[], int id) {
		DateTime start = calendar.getTime()
		DateTime firstByte = new DateTime()
		HTTPResponse resp = http.get(new char[]("http://", server, ":2020//collector/datafromresource/1"), null)
		DateTime end = calendar.getTime()
		DateTime diff = dateUtil.diff(start, end)
		out.println("[$(iu.intToString(id))]: $(iu.intToString(dateUtil.toMilliseconds(diff)))")
		out.println("resp.content 12345..: $(resp.content)")
	}

	int App:main(AppParam params[]) {
		Thread t[] = new Thread[NUM_THREADS]
		while(true) {
			for (int counter = 0; counter < NUM_THREADS; counter++) { t[counter] = asynch::makeRequest("", counter) }
			for (int counter = 0; counter < NUM_THREADS; counter++) { t[counter].join() }
		}
		return 0
	}
}
